--------transpiled code--------
function ##things_are_big()
    return 1
end
things_are_big = Proc(##things_are_big, "things_are_big")
setindex!(sGlobalProc, things_are_big, "things_are_big")
if sasbool(##things_are_big())
    mutable struct NewStructRef_foo
        a::BigInt
        b::BigInt
    end
    struct NewStruct_foo
        data::NewStructRef_foo
    end
    function Base.deepcopy_internal(f::NewStructRef_foo, dict::IdDict)
        return NewStructRef_foo(deepcopy(f.a), deepcopy(f.b))
    end
    function Base.deepcopy_internal(f::NewStruct_foo, dict::IdDict)
        return NewStruct_foo(deepcopy(f.data))
    end
    function scopy(f::NewStructRef_foo)
        return NewStruct_foo(deepcopy(f))
    end
    function scopy(f::NewStruct_foo)
        return f
    end
    function sref(f::NewStructRef_foo)
        return f
    end
    function sref(f::NewStruct_foo)
        return f.data
    end
    function sconvert2foo(f::NewStructRef_foo)
        return NewStruct_foo(deepcopy(f))
    end
    function sconvert2foo(f::NewStruct_foo)
        return f
    end
    function sconvert2foo(f)
        error("cannot convert to a foo from ", f)
    end
    function scast2foo(a, b)
        return NewStruct_foo(NewStructRef_foo(sconvert2bigint(a), sconvert2bigint(b)))
    end
    function scast2foo(f...)
        error("cannot construct a foo from ", f)
    end
    function sdefaultconstructor_foo()
        return NewStruct_foo(NewStructRef_foo(sdefaultconstructor_bigint(), sdefaultconstructor_bigint()))
    end
    function sset(a::Union{NewStruct_foo, NewStructRef_foo}, b)
        return sconvert2foo(b)
    end
    function _sindenting_print(f::NewStructRef_foo, indent::Int)
        s = ""
        s *= " " ^ indent * ".a:\n"
        s *= _sindenting_print(f.a, indent + 3)
        s *= "\n"
        s *= " " ^ indent * ".b:\n"
        s *= _sindenting_print(f.b, indent + 3)
        return s
    end
    function _sindenting_print(f::NewStruct_foo, indent::Int)
        return _sindenting_print(f.data, indent)
    end
    function stypeof(f::Union{NewStruct_foo, NewStructRef_foo})
        return NiString("foo")
    end
else
    mutable struct NewStructRef_foo
        a::Int
        b::Int
    end
    struct NewStruct_foo
        data::NewStructRef_foo
    end
    function Base.deepcopy_internal(f::NewStructRef_foo, dict::IdDict)
        return NewStructRef_foo(deepcopy(f.a), deepcopy(f.b))
    end
    function Base.deepcopy_internal(f::NewStruct_foo, dict::IdDict)
        return NewStruct_foo(deepcopy(f.data))
    end
    function scopy(f::NewStructRef_foo)
        return NewStruct_foo(deepcopy(f))
    end
    function scopy(f::NewStruct_foo)
        return f
    end
    function sref(f::NewStructRef_foo)
        return f
    end
    function sref(f::NewStruct_foo)
        return f.data
    end
    function sconvert2foo(f::NewStructRef_foo)
        return NewStruct_foo(deepcopy(f))
    end
    function sconvert2foo(f::NewStruct_foo)
        return f
    end
    function sconvert2foo(f)
        error("cannot convert to a foo from ", f)
    end
    function scast2foo(a, b)
        return NewStruct_foo(NewStructRef_foo(sconvert2int(a), sconvert2int(b)))
    end
    function scast2foo(f...)
        error("cannot construct a foo from ", f)
    end
    function sdefaultconstructor_foo()
        return NewStruct_foo(NewStructRef_foo(sdefaultconstructor_int(), sdefaultconstructor_int()))
    end
    function sset(a::Union{NewStruct_foo, NewStructRef_foo}, b)
        return sconvert2foo(b)
    end
    function _sindenting_print(f::NewStructRef_foo, indent::Int)
        s = ""
        s *= " " ^ indent * ".a:\n"
        s *= _sindenting_print(f.a, indent + 3)
        s *= "\n"
        s *= " " ^ indent * ".b:\n"
        s *= _sindenting_print(f.b, indent + 3)
        return s
    end
    function _sindenting_print(f::NewStruct_foo, indent::Int)
        return _sindenting_print(f.data, indent)
    end
    function stypeof(f::Union{NewStruct_foo, NewStructRef_foo})
        return NiString("foo")
    end
end
f = sdefaultconstructor_foo()
(sref(f)).a = sset((sref(f)).a, 1)
_sprintout(sref(f))
_sprintout(stypeof(sref(f)))
_sprintout(stypeof((sref(f)).a))
-------------------------------
.a:
   1
.b:
   0
foo
bigint
